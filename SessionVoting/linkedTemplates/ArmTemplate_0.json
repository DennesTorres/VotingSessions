{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "SessionVoting"
		},
		"ConferencesDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ConferencesDB'"
		},
		"sessionizetemp_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'sessionizetemp'"
		},
		"dataFactory_properties_globalParameters_EventCode_value": {
			"type": "string",
			"defaultValue": "pudjjkcn"
		},
		"dataFactory_location": {
			"type": "string",
			"defaultValue": "northeurope"
		},
		"Sessionize_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://sessionize.com/api/v2/',linkedService().EventCode)}"
		},
		"sessionizetemp_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://eventsessions.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[parameters('factoryName')]",
			"type": "Microsoft.DataFactory/factories",
			"apiVersion": "2018-06-01",
			"properties": {
				"globalParameters": {
					"EventCode": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_EventCode_value')]"
					}
				}
			},
			"dependsOn": [],
			"location": "[parameters('dataFactory_location')]"
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConferencesDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ConferencesDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sessionize')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"EventCode": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Sessionize_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sessionizetemp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sessionizetemp_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('sessionizetemp_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sessions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sessionize",
					"type": "LinkedServiceReference",
					"parameters": {
						"EventCode": {
							"value": "@dataset().EventCode",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"EventCode": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/view/Sessions"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sessionize')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SessionsDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ConferencesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "title",
						"type": "varchar"
					},
					{
						"name": "description",
						"type": "varchar"
					},
					{
						"name": "SpeakerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ConferenceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OriginalId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Sessions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ConferencesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sessionsfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sessionizetemp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sessions.csv",
						"folderPath": "sessions",
						"fileSystem": "sessionize"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sessionizetemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Speakers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sessionizetemp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "speakers.csv",
						"folderPath": "speakers",
						"fileSystem": "sessionize"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sessionizetemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SpeakersDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ConferencesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Code",
						"type": "uniqueidentifier"
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "TagLine",
						"type": "varchar"
					},
					{
						"name": "ProfilePicture",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Speakers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ConferencesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sessionstemp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sessionizetemp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"EventCode": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('sessions',dataset().EventCode,'.json')",
							"type": "Expression"
						},
						"folderPath": "sessions",
						"fileSystem": "sessionize"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sessionizetemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sessionstemp2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sessionizetemp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"EventCode": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('sessions',dataset().EventCode,'.json')",
							"type": "Expression"
						},
						"folderPath": "sessions",
						"fileSystem": "sessionize"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sessionizetemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conferences')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ConferencesDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "code",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Conferences"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ConferencesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportSessions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ReadAPI",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": true
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "sessionizetemp",
										"type": "LinkedServiceReference"
									},
									"path": "sessionize"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Sessions",
								"type": "DatasetReference",
								"parameters": {
									"EventCode": {
										"value": "@pipeline().globalParameters.EventCode",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sessionstemp",
								"type": "DatasetReference",
								"parameters": {
									"EventCode": {
										"value": "@pipeline().globalParameters.EventCode",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sessions')]",
				"[concat(variables('factoryId'), '/datasets/sessionstemp')]",
				"[concat(variables('factoryId'), '/linkedServices/sessionizetemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportSessions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sessionsfile",
								"type": "DatasetReference"
							},
							"name": "SessionsSource"
						},
						{
							"dataset": {
								"referenceName": "SessionsDestination",
								"type": "DatasetReference"
							},
							"name": "SessionsDestination"
						},
						{
							"dataset": {
								"referenceName": "SpeakersDestination",
								"type": "DatasetReference"
							},
							"name": "SpeakersDestination"
						},
						{
							"dataset": {
								"referenceName": "Conferences",
								"type": "DatasetReference"
							},
							"name": "ConferencesDestination"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SessionsDestination",
								"type": "DatasetReference"
							},
							"name": "Saving"
						}
					],
					"transformations": [
						{
							"name": "SessionExists"
						},
						{
							"name": "FindSpeakerId"
						},
						{
							"name": "Conference"
						},
						{
							"name": "FindConferences"
						}
					],
					"script": "parameters{\n\tEventId as string\n}\nsource(output(\n\t\tId as integer,\n\t\ttitle as string,\n\t\tdescription as string,\n\t\tSpeakerId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SessionsSource\nsource(output(\n\t\tId as integer,\n\t\ttitle as string,\n\t\tdescription as string,\n\t\tSpeakerId as integer,\n\t\tConferenceId as integer,\n\t\tOriginalId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SessionsDestination\nsource(output(\n\t\tId as integer,\n\t\tCode as string,\n\t\tName as string,\n\t\tTagLine as string,\n\t\tProfilePicture as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SpeakersDestination\nsource(output(\n\t\tId as integer,\n\t\tcode as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ConferencesDestination\nSessionsSource, SessionsDestination exists(SessionsSource@Id == OriginalId,\n\tnegate:true,\n\tbroadcast: 'auto')~> SessionExists\nSessionExists, SpeakersDestination lookup(SpeakerId == Code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> FindSpeakerId\nFindSpeakerId derive(ConferenceId = $EventId) ~> Conference\nConference, ConferencesDestination lookup(ConferenceId == ConferencesDestination@code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> FindConferences\nFindConferences sink(input(\n\t\tId as integer,\n\t\ttitle as string,\n\t\tdescription as string,\n\t\tSpeakerId as integer,\n\t\tConferenceId as integer,\n\t\tOriginalId as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\ttitle,\n\t\tdescription,\n\t\tSpeakerId = SpeakersDestination@Id,\n\t\tConferenceId = SessionsSource@Id,\n\t\tOriginalId = ConferencesDestination@Id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Saving"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sessionsfile')]",
				"[concat(variables('factoryId'), '/datasets/SessionsDestination')]",
				"[concat(variables('factoryId'), '/datasets/SpeakersDestination')]",
				"[concat(variables('factoryId'), '/datasets/Conferences')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportSpeakers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Speakers",
								"type": "DatasetReference"
							},
							"name": "SpeakersSource"
						},
						{
							"dataset": {
								"referenceName": "SpeakersDestination",
								"type": "DatasetReference"
							},
							"name": "SpeakersDestination"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SpeakersDestination",
								"type": "DatasetReference"
							},
							"name": "SavingSpeakers"
						}
					],
					"transformations": [
						{
							"name": "SpeakerExist"
						}
					],
					"script": "source(output(\n\t\tId as string,\n\t\tName as string,\n\t\tProfilePicture as string,\n\t\ttagLine as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SpeakersSource\nsource(output(\n\t\tId as integer,\n\t\tCode as string,\n\t\tName as string,\n\t\tTagLine as string,\n\t\tProfilePicture as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SpeakersDestination\nSpeakersSource, SpeakersDestination exists(SpeakersSource@Id == Code,\n\tnegate:true,\n\tbroadcast: 'auto')~> SpeakerExist\nSpeakerExist sink(input(\n\t\tId as integer,\n\t\tCode as string,\n\t\tName as string,\n\t\tTagLine as string,\n\t\tProfilePicture as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCode = Id,\n\t\tName,\n\t\tTagLine = tagLine,\n\t\tProfilePicture\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SavingSpeakers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Speakers')]",
				"[concat(variables('factoryId'), '/datasets/SpeakersDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportConference')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Speakers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ImportSpeakers",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SpeakersSource": {},
									"SpeakersDestination": {},
									"SavingSpeakers": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "sessions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Speakers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ImportSessions",
								"type": "DataFlowReference",
								"parameters": {
									"EventId": {
										"value": "'@{pipeline().globalParameters.EventCode}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SessionsSource": {},
									"SessionsDestination": {},
									"SpeakersDestination": {},
									"ConferencesDestination": {},
									"Saving": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ImportSpeakers')]",
				"[concat(variables('factoryId'), '/dataflows/ImportSessions')]"
			]
		}
	]
}